Python - for Just dial - for clicking buttons on search page
'''input_city=driver.find_element("id","city-auto-sug")
    input_city.click()
    input_city.clear()
    #Select(input_city).select_by_index[1]
    city=city
    for letter in city:
        input_city.send_keys(letter)
        wait_time=random.randint(0,1000)/1000
        time.sleep(wait_time)
    input_city.send_keys(Keys.ARROW_DOWN)
    time.sleep(1)
    input_city.send_keys(Keys.ARROW_DOWN)
    time.sleep(1)
    input_city.send_keys(Keys.ENTER)
    time.sleep(1)
    input_job_category=driver.find_element("id","main-auto")
    try:
        input_job_category.clear()
    except Exception as error:
        print(error)
    input_job_category.send_keys(Keys.DELETE)
    #Select(input_job_category).select_by_index[1]
    job_category=job_category
    for letter in job_category:
        input_job_category.send_keys(letter)
        wait_time=random.randint(0,1000)/1000
        time.sleep(wait_time)   
    search_button=driver.find_element("xpath","/html/body/div/div/section/header/div/div[2]/div/div[2]/label/div[3]/div") 
    driver.execute_script("arguments[0].setAttribute('style', arguments[1]);",
                              search_button, "border: {0}px solid {1};".format(5, "blue"))
    search_button.click()'''

Python for meta ads page - to click the buttons
```country_button=driver.find_element(By.ID,"js_b")
    country=country
    for letter in country:
        country_button.send_keys(letter)
        wait_time=random.randint(0,1000)/1000
        time.sleep(wait_time)
    adbtn = wait.until(EC.element_to_be_clickable((By.XPATH,"//div[text()='Ad category']")))
    adbtn.click()
    alladds = wait.until(EC.element_to_be_clickable((By.XPATH,"//span[text()='All ads']")))
    alladds.click()
    search = wait.until(EC.element_to_be_clickable((By.XPATH,"//input[@placeholder='Search by keyword or advertiser']")))
    search.send_keys(ad_name)
    time.sleep(1)
    search.send_keys(Keys.ENTER)
    time.sleep(1)```

Python for ad text - worksheet1.write(0,1,"Ad Running start date")
    worksheet1.write(0,2,"Ad Text")
    for i in range(len(ad_started_running_date)-1):
        worksheet1.write(i+1,1,ad_started_running_date[i])
    for i in range(len(ad_data)-1):
        worksheet1.write(i+1,2,ad_data[i])

print(ad_data[i+1])
print(len(ad_dates))
print(len(ad_statuses))
print("length of src before reducing :"+str(len(src)))
        src = reduce(lambda re, x: re+[x] if x not in re else re, src, [])
        print("length of src after reducing :"+str(len(src)))

import PIL
from PIL import Image

def alpharemover(image):
    if image.mode != 'RGBA':
        return image
    canvas = Image.new('RGBA', image.size, (255,255,255,255))
    canvas.paste(image, mask=image)
    return canvas.convert('RGB')

def with_ztransform_preprocess(hashfunc, hash_size=8):
    def function(path):
        image = alpharemover(Image.open(path))
        image = image.convert("L").resize((hash_size, hash_size), Image.ANTIALIAS)
        data = image.getdata()
        quantiles = np.arange(100)
        quantiles_values = np.percentile(data, quantiles)
        zdata = (np.interp(data, quantiles_values, quantiles) / 100 * 255).astype(np.uint8)
        image.putdata(zdata)
        return hashfunc(image)
    return function
  
dhash_z_transformed = with_ztransform_preprocess(imagehash.dhash, hash_size = 8)
D:\GAYATHRI\Microsoft VS Code\Documents\GitHub\Selenium_testers\Issues, Politics and Elections
D:\GAYATHRI\Microsoft VS Code\Documents\GitHub\Selenium_testers\All type